import grails.util.Environment

buildscript {
    ext {
        grailsVersion = project.grailsVersion
    }
    repositories {
        mavenLocal()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://repo.grails.org/grails/core" }
        maven { url "http://repo.spring.io/milestone/" }
        maven { url "https://repo.grails.org/grails/plugins" }
        maven {
            credentials {
                username mavenUser
                password mavenPassword
            }
            url "http://maven.causecode.com"
        }
        mavenCentral()
    }
    dependencies {
        classpath "com.netflix.nebula:nebula-publishing-plugin:4.4.4"
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
    }
}

plugins {
    id 'nebula.maven-publish' version '4.4.4'
}

group "com.causecode.plugins"
version "2.5.5"

apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "org.grails.grails-plugin"
apply plugin: "org.grails.grails-plugin-publish"
apply plugin: "org.grails.grails-gsp"
apply plugin: 'codenarc'

ext {
    grailsVersion = project.grailsVersion
    gradleWrapperVersion = project.gradleWrapperVersion
}

repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
    maven {
        credentials {
            username mavenUser
            password mavenPassword
        }
        url "http://maven.causecode.com"
    }
}

dependencyManagement {
    imports {
        mavenBom "org.grails:grails-bom:$grailsVersion"
    }
    applyMavenExclusions false
}

dependencies {
    // Default dependencies in grails 3.2.0 for plugin
    // While porting to a new grails version, create a blank app and replace the default dependencies with the new ones.
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-dependencies"
    compile "org.grails:grails-web-boot"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:scaffolding"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web"
    //provided "org.codehaus.groovy:groovy-ant"
    runtime "com.bertramlabs.plugins:asset-pipeline-grails:2.11.1"
    //runtime "com.h2database:h2"
    testCompile "org.grails:grails-plugin-testing"
    testCompile "org.grails.plugins:geb"
    testRuntime "org.seleniumhq.selenium:selenium-htmlunit-driver:2.47.1"
    testRuntime "net.sourceforge.htmlunit:htmlunit:2.18"


    /*
    * Dependencies which were needed for the application/plugin.
    */
    compile "org.grails.plugins:hibernate5"
    profile "org.grails.profiles:web-plugin:3.1.4"
    compile "org.grails.plugins:spring-security-core:3.1.1"
    compile "org.ow2.asm:asm:5.0.3"
    compile "org.grails.plugins:grails-markdown:3.0.0"
    profile "org.grails.profiles:web-plugin:3.1.4"
    provided "org.grails:grails-plugin-services"
    provided "org.grails:grails-plugin-domain-class"
    compile "com.causecode.plugins:file-uploader:3.0.0"
    compile ("com.causecode.plugins:taggable:1.4.1") {
        exclude module: "hibernate"
    }
}

project.publishing {
    publications {
        mavenJava(MavenPublication) {
            from project.components.java
            println "Removing dependencies without a version"

            artifactId "content"

            pom.withXml {
                def pomNode = asNode()
                // version-less dependencies are handled with dependencyManagement
                pomNode.dependencies.dependency.findAll {
                    it.version.text().isEmpty()
                }.each {
                    it.replaceNode {}
                }
            }
        }
    }
    repositories {
        maven {
            credentials {
                username mavenPublishUser
                password mavenPublishPassword
            }
            url "http://maven-upload.causecode.com"
        }
    }
}

grails {
    exploded = true
}

task wrapper(type: Wrapper) {
    gradleVersion = gradleWrapperVersion
}

grailsPublish {
    // TODO: Provide values here
    user = 'user'
    key = 'key'
    githubSlug = 'foo/bar'
    license {
        name = 'Apache-2.0'
    }
    title = "My Plugin"
    desc = "Full plugin description"
    developers = [johndoe: "John Doe"]
    portalUser = ""
    portalPassword = ""
}

codenarc {
    toolVersion = "0.25.2"
}

codenarcMain {
    configFile file('config/codenarc/codenarc.groovy')
}

codenarcTest {
    configFile file('config/codenarc/codenarc.groovy')
}
